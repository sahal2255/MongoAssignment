1.Retrieve the names of all customers. 


    db.Customer.find({},{_id:0,CostomerName:1})


2.Retrieve the total number of orders placed.


    db.Orders.find().count()


3.Retrieve the details of the order with OrderID 1003.


    db.Orders.find({orderId:1003})


4.Retrieve the names of customers who are from Beijing.


    db.Customer.find({City:'Baijing'})


5.Retrieve the total price of all orders.


    db.Products.aggregate([{$group:{_id:0,total:{$sum:"$Price"}}}])


6.Retrieve the product names and their prices.


    db.Products.find({},{_id:0,ProductName:1,Price:1})


7.Retrieve the names of customers along with their city.


    db.Customer.find({},{_id:0,CostomerName:1,City:1})


8.Retrieve the orders placed by John Doe (CustomerID 1).


    db.Orders.find({CostomerId:1})


9.Retrieve the customers who have placed orders.





10.Retrieve the orders placed by customers from Shanghai.


    db.Customer.aggregate([{$match:{City:'Shaghai'}},{$lookup:{from:'Orders',localField:'id',foreignField:'CostomerId',as:'order'}}])


11.Retrieve the highest price from the Products table


    db.Product.aggregate([{$group:{_id:0,high:{$max:'$Price'}}}])


12.Retrieve the average price of all products.

   
    db.Product.aggregate([{$group:{_id:0,average:{$avg:'$Price'}}}])


13.Retrieve the details of customers who have placed orders.


    db.Customer.aggregate([{$lookup:{from:'Orders',localField:'id',foreignField:'CostomerId',as:'orders'}},{$match:{orders:{$exists:true,$not:{$size:0}}}}])


15.Retrieve the customer names along with the total order value.


    db.Orders.aggregate([{$lookup:{from:'Customer',localField:'CostomerId',foreignField:'id',as:'orders'}},{$unwind:'$orders'},{$group:{_id:'$orders.CostomerName',total:{$sum:1}}}])


16.Retrieve the orders placed in descending order of their total value.


    db.Orders.find().sort({Total:-1})


17.Retrieve the product names along with their prices, sorted by price in descending order.


    db.Products.find().sort({Price:-1})


18.Retrieve the names of customers along with the number of orders they have placed.


    db.Orders.aggregate([{$group:{_id:'$CostomerId',num:{$sum:1}}},{$lookup:{from:'Customer',localField:'_id',foreignField:'id',as:'costomer'}},{$unwind:'$costomer'},{$project:{_id:0,CostomerName:'$costomer.CostomerName',num:1}}])


19.Retrieve the orders placed by customers from London.


    db.Customer.aggregate([{$match:{City:'London'}},{$lookup:{from:'Orders',localField:'id',foreignField:'CostomerId',as:'orders'}},{$unwind:'$orders'},{$project:{_id:'$orders.OrderId',costomer:'$CostomerName',total:'$orders.Total'}}])


20.Insert a new customer with ID 5, name 'Emma Wilson', and city 'Paris'.


    db.Customer.insertOne({id:5,CostomerName:'Emma Wilsom',City:'Paris'})


21.Update the city of the customer with ID 3 to 'Tokyo'.


    db.Customer.update({id:3},{$set:{City:'Tokyo'}})


21.Update the city of the customer with ID 3 to 'Tokyo'.


    db.Products.update({ProductID:2},{$set:{Price:900}})


23.Delete the order with OrderID 1002


    db.Orders.remove({OrderID:1002})


24.Retrieve the names of customers and their cities using aliases.


    db.Customer.aggregate([{$project:{_id:0,Name:'$CostomerName',Place:'$City'}}])


25.Retrieve the customer names along with their total order value, sorted by order value in descending order.


     db.Orders.aggregate([ { $group: { _id: "$CostomerId", totalOrderValue: { $sum: "$Total" } } }, { $lookup: { from: "Customer", localField: "_id", foreignField: "id", as: "customer" } }, { $unwind:"$customer"}, { $project: { _id: 0, CustomerName: "$customer.CostomerName", totalOrderValue: 1 } },{$sort:{totalOrderValue:-1}}] )


26.Retrieve the customer names along with the number of orders they have placed, sorted by the number of orders in ascending order.


    db.Orders.aggregate([ { $group: { _id: "$CostomerId",Orders: { $sum: 1 } } }, { $lookup: { from: "Customer", localField: "_id", foreignField: "id", as: "customer" } }, { $unwind: "$customer"},{$project:{_id:0,CostomerName:"$customer.CostomerName",Orders:1}},{$sort:{Orders:1}}])


27.Retrieve the customer names along with the average order value, sorted by the average order value in descending order.


     db.Orders.aggregate([ { $group: { _id: "$CostomerId", totalvalue: { $sum: "$Total" }, numOrders: { $sum: 1 } } }, { $lookup: { from: "Customer", localField: "_id", foreignField: "CostomerId", as: "costomer" } }, { $unwind: "$costomer" }, { $project: { _id: 0, CostomerName: "$costomer.CostomerName", avgOdrvalue: { $divide: ["$totalvalue", "$numOrders"] } } }, { $sort: { avgOdrvalue: -1 } }] )


28.Calculate the total price of all orders placed by customers from Beijing


    db.Orders.aggregate([ { $lookup: { from: "Customer", localField: "CostomerId", foreignField: "id", as: "costomer" } }, { $unwind: "$costomer" }, { $match: { "costomer.City": "Baijing" } },{$group:{ _id: null, totalOrderPrice: { $sum: "$Total" } } } ])


29.Calculate the average price of products in the Tablet category.


    db.Products.aggregate([{$match:{ProductName:'Tablet'}},{$group:{_id:0,avg:{$avg:'$Price'}}}])